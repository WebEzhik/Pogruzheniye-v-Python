#!/usr/bin/python
# -*- coding: latin-1 -*-
import csv
import logging
import argparse
from argparse import ArgumentTypeError


class InvalidNameError(ValueError):
    def __init__(self):
        super().__init__("??? ?????? ????????? ?????? ????? ? ?????????? ? ????????? ?????")


class OutOfRangeError(ValueError):
    def __init__(self, field, min_value, max_value):
        super().__init__(f"{field} ?????? ???? ? ????????? ?? {min_value} ?? {max_value}")


class Student:
    def __init__(self, name, subjects_file):
        self._validate_name(name)
        self.name = name
        self._load_subjects(subjects_file)
        self._grades = {subject: [] for subject in self.subjects}
        self._test_results = {subject: [] for subject in self.subjects}

    def _validate_name(self, name):
        if not name.isalpha() or not name.istitle():
            raise InvalidNameError()

    def _load_subjects(self, file_path):
        with open(file_path, newline='') as file:
            reader = csv.reader(file)
            self.subjects = [subject[0] for subject in reader]

    def add_grade(self, subject, grade):
        if subject not in self.subjects:
            raise ValueError(f"??????? {subject} ?? ???????? ??? ??????? ????????")
        if grade < 2 or grade > 5:
            raise OutOfRangeError("??????", 2, 5)
        self._grades[subject].append(grade)

    def add_test_result(self, subject, result):
        if subject not in self.subjects:
            raise ValueError(f"??????? {subject} ?? ???????? ??? ??????? ????????")
        if result < 0 or result > 100:
            raise OutOfRangeError("????????? ?????", 0, 100)
        self._test_results[subject].append(result)

    def _calculate_average(self, data):
        if not data:
            return 0
        return sum(data) / len(data)

    def get_subject_average_grade(self, subject):
        return self._calculate_average(self._grades.get(subject, []))

    def get_subject_average_test_result(self, subject):
        return self._calculate_average(self._test_results.get(subject, []))

    def get_overall_average_grade(self):
        all_grades = [grade for grades in self._grades.values() for grade in grades]
        return self._calculate_average(all_grades)

    def get_overall_average_test_result(self):
        all_test_results = [result for results in self._test_results.values() for result in results]
        return self._calculate_average(all_test_results)


def parse_args():
    parser = argparse.ArgumentParser(description="????????? ??? ????? ???????????? ????????")
    parser.add_argument("student_name", type=str, help="??? ????????")
    parser.add_argument("subjects_file", type=str, help="???? ? ????? ? ?????????? ???????? (CSV)")
    return parser.parse_args()


def configure_logging():
    logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")


if __name__ == "__main__":
    args = parse_args()
    configure_logging()

    try:
        student = Student(args.student_name, args.subjects_file)
        logging.info(f"??????? {args.student_name} ??????? ??????")
    except InvalidNameError:
        logging.error("??? ?????? ????????? ?????? ????? ? ?????????? ? ????????? ?????")
    except FileNotFoundError:
        logging.error(f"???? ? ?????????? ({args.subjects_file}) ?? ??????")
    else:
        for subject in student.subjects:
            logging.info(f"???????: {subject}")
            logging.info(f"??????? ????: {student.get_subject_average_grade(subject)}")
            logging.info(f"??????? ????????? ??????: {student.get_subject_average_test_result(subject)}")

        logging.info(f"????? ??????? ???? ?? ???????: {student.get_overall_average_grade()}")
        logging.info(f"????? ??????? ????????? ??????: {student.get_overall_average_test_result()}")

# ??????: python student_grades.py "?????? ???? ????????" "subjects.csv"