#!/usr/bin/python
# -*- coding: latin-1 -*-
import logging
import argparse
from argparse import ArgumentTypeError


class InvalidRectangleError(Exception):
    """?????????? ??? ???????????? ???????????????."""

    def __init__(self, message="???????????? ?????????????."):
        self.message = message
        super().__init__(self.message)


class NegativeSideError(Exception):
    """?????????? ??? ????????????? ?????? ??????????????."""

    def __init__(self, side_name, side_value):
        self.side_name = side_name
        self.side_value = side_value
        self.message = f"????????????? ?? ????? ????? ????????????? ???????: {self.side_name} = {self.side_value}"
        super().__init__(self.message)


class Rectangle:
    """
        ????? InvalidRectangleError ????? ?????????????? ??? ?????????? ??????,
        ????????? ? ????????? ???????????? ??????????????? (????????, ???? ????? ??? ?????? ????? 0).

        ????? NegativeSideError ????? ??????????????, ????? ????????? ???????? ??????????????? ? ??????????????
        ?????????.

        ????? Rectangle ???????????? ?????????????.
        ????????:
            length (float): ????? ??????????????.
            width (float): ?????? ??????????????.
        ??????:
            perimeter(): ?????????? ???????? ??????????????.
            area(): ?????????? ??????? ??????????????.
            __add__(other): ?????????? ????? ????????? ??????????????, ?????????? ??????????? ???????? ? ??????
            ???????????????.
            __sub__(other): ?????????? ????? ????????? ??????????????, ?????????? ??????????? ????????? ?? ????????
            ?????????????? ??????? ??????????????.
            __str__(): ?????????? ????????? ????????????? ??????????????.
        """

    def __init__(self, length, width):
        if length <= 0 or width <= 0:
            raise InvalidRectangleError("????????????? ?? ????? ????? ??????? /n"
                                        "??? ????????????? ????? ??? ??????.")
        if length < 0:
            raise NegativeSideError("?????", length)
        if width < 0:
            raise NegativeSideError("??????", width)
        self.length = length
        self.width = width

    def perimeter(self):
        return 2 * (self.length + self.width)

    def area(self):
        return self.length * self.width

    def __add__(self, other):
        new_length = self.length + other.length
        new_width = self.width + other.width
        return Rectangle(new_length, new_width)

    def __sub__(self, other):
        new_length = self.length - other.length
        new_width = self.width - other.width
        if new_length < 0:
            new_length = 0
        if new_width < 0:
            new_width = 0
        return Rectangle(new_length, new_width)

    def __str__(self):
        return f"?????????????: ????? - {self.length}, ?????? - {self.width}"

    @staticmethod
    def print_docstring():
        """????? ???????????? ?????? ?? ??????."""
        print(Rectangle.__doc__)


def parse_args():
    parser = argparse.ArgumentParser(description="????????? ??? ?????? ? ????????????????")
    parser.add_argument("length1", type=positive_float, help="????? ??????? ??????????????")
    parser.add_argument("width1", type=positive_float, help="?????? ??????? ??????????????")
    parser.add_argument("length2", type=positive_float, help="????? ??????? ??????????????")
    parser.add_argument("width2", type=positive_float, help="?????? ??????? ??????????????")
    return parser.parse_args()


def positive_float(value):
    try:
        value_float = float(value)
        if value_float <= 0:
            raise ValueError
        return value_float
    except ValueError:
        raise ArgumentTypeError(f"???????? ?????? ???? ????????????? ?????? ({value} ???????)")


def configure_logging():
    logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")


if __name__ == "__main__":
    args = parse_args()
    configure_logging()

    try:
        rect1 = Rectangle(args.length1, args.width1)
        rect2 = Rectangle(args.length2, args.width2)
        logging.info("?????????????? ??????? ???????")
    except (InvalidRectangleError, NegativeSideError) as e:
        logging.error(f"?????? ??? ???????? ??????????????: {e}")
    else:
        logging.info(f"???????? ??????? ??????????????: {rect1.perimeter()}")
        logging.info(f"??????? ??????? ??????????????: {rect2.area()}")

        try:
            rect3 = rect1 + rect2
            logging.info(f"???????? ???????????????: {rect3}")
            rect4 = rect1 - rect2
            logging.info(f"????????? ???????????????: {rect4}")
        except (InvalidRectangleError, NegativeSideError) as e:
            logging.error(f"?????? ??? ?????????? ???????? ? ????????????????: {e}")

# ??????: python rectangle.py 10 7 10 7